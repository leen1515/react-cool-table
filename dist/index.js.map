{"version":3,"file":"index.js","sources":["../src/utils/flattenObject.js","../src/utils/columns.js","../src/components/icons/sort-up-solid.svg","../src/components/icons/sort-down-solid.svg","../src/components/HeaderTable.jsx","../src/components/PaginationSection.jsx","../src/utils/renderCellValue.js","../src/utils/formatIfDate.js","../src/components/LinesTable.jsx","../src/hookperso/usePaginationPerso.js","../src/components/NumberRowSelector.jsx","../src/CoolTable.jsx","../src/utils/columnSelected.js"],"sourcesContent":["/**\r\n * @name flattenObject\r\n * @memberof utils\r\n * @function\r\n * @description\r\n * Flattens a nested object by transforming its nested properties into dot-separated keys.\r\n * { a: { b: c }} becomes { 'a.b': c }. Arrays and null values are not flattened.\r\n *\r\n * @param {Object} obj - The object to be flattened.\r\n * @returns {Object} A new object with flattened keys.\r\n */\r\n\r\nexport const flattenObject = (obj) => {\r\n    const flattened = {};\r\n    Object.keys(obj).forEach((key) => {\r\n        if (typeof obj[key] === \"object\" && obj[key] !== null && !Array.isArray(obj[key])) {\r\n            Object.keys(obj[key]).forEach(subKey => {\r\n                flattened[`${key}.${subKey}`] = obj[key][subKey];\r\n            });\r\n        } else {\r\n            flattened[key] = obj[key];\r\n        }\r\n    });\r\n    return flattened;\r\n};\r\n","import { flattenObject } from \"./flattenObject\";\r\n\r\n/**\r\n * @namespace utils\r\n * @description Utilities for data manipulation.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @name columns\r\n * @memberof utils\r\n * @function\r\n * @description\r\n * Converts data into an array of columns by flattening each object.\r\n * Useful for preparing data for components like tables.\r\n *\r\n * @param {Array<Object>} data - Array of objects to process.\r\n * @param {boolean} position - If true, formats the column headers.\r\n * @returns {Array<{Header: string, dataKey: string}>} An array of objects with Header and dataKey.\r\n */\r\n\r\nexport const columns = (data, position) => {\r\n    // Pre-checks for the input data\r\n  if (!Array.isArray(data) || data.length === 0 || typeof data[0] !== \"object\" || data[0] == null) {\r\n    return [];\r\n  }\r\n\r\n  // Flatten the first object to get keys\r\n  const flatData = flattenObject(data[0]);\r\n\r\n  // Transform keys into an array of columns\r\n  return Object.keys(flatData).map(key => {\r\n    const formattedHeader = position ? formatHeader(key) : key;\r\n    return { Header: formattedHeader, dataKey: key };\r\n  });\r\n};\r\n\r\n\r\n/**\r\n * Formats a key into a more readable string for Header Column.\r\n * 'userFirstName' becomes 'User First Name'.\r\n *\r\n * @memberof utils\r\n * @function\r\n * @private\r\n * @param {string} key - Key to format.\r\n * @returns {string} Formatted key.\r\n */\r\nfunction formatHeader(key) {\r\n  const parts = key.split(\".\");\r\n  const lastPart = parts[parts.length - 1];\r\n  return lastPart.replace(/([A-Z])/g, \" $1\").replace(/^./, str => str.toUpperCase()).trim();\r\n}\r\n","export default \"data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20height%3D%2216%22%20width%3D%2210%22%20viewBox%3D%220%200%20320%20512%22%3E%3Cpath%20opacity%3D%221%22%20fill%3D%22%231E3050%22%20d%3D%22M182.6%2041.4c-12.5-12.5-32.8-12.5-45.3%200l-128%20128c-9.2%209.2-11.9%2022.9-6.9%2034.9s16.6%2019.8%2029.6%2019.8H288c12.9%200%2024.6-7.8%2029.6-19.8s2.2-25.7-6.9-34.9l-128-128z%22%2F%3E%3C%2Fsvg%3E\"","export default \"data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20height%3D%2216%22%20width%3D%2210%22%20viewBox%3D%220%200%20320%20512%22%3E%3Cpath%20opacity%3D%221%22%20fill%3D%22%231E3050%22%20d%3D%22M182.6%20470.6c-12.5%2012.5-32.8%2012.5-45.3%200l-128-128c-9.2-9.2-11.9-22.9-6.9-34.9s16.6-19.8%2029.6-19.8H288c12.9%200%2024.6%207.8%2029.6%2019.8s2.2%2025.7-6.9%2034.9l-128%20128z%22%2F%3E%3C%2Fsvg%3E\"","import React from \"react\";\r\n\r\nimport up from \"./icons/sort-up-solid.svg\";\r\nimport down from \"./icons/sort-down-solid.svg\";\r\n\r\n/**\r\n * @name HeaderTable\r\n * @function\r\n * @description - A table header component that displays column names with sorting functionality.\r\n * Includes visual indicators (arrows) to show the current sort direction for each column.\r\n * Clicking on a column header triggers sorting based on that column.\r\n *\r\n * @param {Array<{Header: string, dataKey: string}>} columnsName - Array of objects representing column headers and their respective data keys.\r\n * @param {function} onSortChange - Callback function to be called when a column header is clicked for sorting.\r\n * @param {{key: string, direction: string}} sortConfig - Object containing the current sorting configuration (column key and direction).\r\n * @returns {React.Component} A React component representing the table header with sorting capabilities.\r\n */\r\n\r\nfunction HeaderTable({ columnsName, onSortChange, sortConfig }) {\r\n\r\n  if (!columnsName) return null;\r\n\r\n   /**\r\n   * Renders the sorting arrow based on the current sorting configuration.\r\n   * \r\n   * @param {string} columnName - The name of the column for which to render the sort arrow.\r\n   * @returns {React.Component} A React component representing the sort arrow.\r\n   */\r\n  const renderSortArrow = (columnName) => {\r\n    if (sortConfig && sortConfig.key === columnName) {\r\n      if (sortConfig.direction === \"ascending\") {\r\n        return <img src={up} alt=\"Ascending\" />;\r\n      } else if (sortConfig.direction === \"descending\") {\r\n        return <img src={down} alt=\"Descending\" />;\r\n      }\r\n    }\r\n    return <div className=\"cool-arrow-container\"><img src={up} alt=\"Ascending\" /><img src={down} alt=\"Descending\" /></div>;\r\n  };\r\n\r\n  return (\r\n    <div className=\"cool-column-container\">\r\n      {columnsName.map((column, i) => (\r\n        <div className=\"cool-column\" key={i} onClick={() => onSortChange(column.dataKey)}>\r\n          <div className=\"cool-column-title-arrow\">{column.Header || \" \"}\r\n          {renderSortArrow(column.dataKey)}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HeaderTable;\r\n","import React from \"react\";\r\n\r\n\r\n/**\r\n * @name Pagination\r\n * @memberof Table\r\n * @function\r\n * @description\r\n * A pagination component that displays page buttons based on the total number of pages\r\n * and the current page. It allows navigation to a specific page, next page, previous page,\r\n * and also handles scenarios where the total pages exceed a maximum button count.\r\n *\r\n * @param {number} totalPages - The total number of pages.\r\n * @param {number} currentPage - The current active page.\r\n * @param {function} goToPage - Callback function to navigate to a specific page.\r\n * @param {function} goToNextPage - Callback function to navigate to the next page.\r\n * @param {function} goToPrevPage - Callback function to navigate to the previous page.\r\n * @returns {React.Component} A React component for pagination controls.\r\n */\r\n\r\nfunction Pagination({ totalPages, currentPage, goToPage, goToNextPage, goToPrevPage }) {\r\n    const pageButtons = [];\r\n    const maxPageButtons = 10;\r\n\r\n    let startPage, endPage;\r\n    if (totalPages <= maxPageButtons) {\r\n        startPage = 1;\r\n        endPage = totalPages;\r\n    } else {\r\n        const maxPagesBeforeCurrentPage = Math.floor(maxPageButtons / 2);\r\n        const maxPagesAfterCurrentPage = Math.ceil(maxPageButtons / 2) - 1;\r\n        if (currentPage <= maxPagesBeforeCurrentPage) {\r\n            startPage = 1;\r\n            endPage = maxPageButtons;\r\n        } else if (currentPage + maxPagesAfterCurrentPage >= totalPages) {\r\n            startPage = totalPages - maxPageButtons + 1;\r\n            endPage = totalPages;\r\n        } else {\r\n            startPage = currentPage - maxPagesBeforeCurrentPage;\r\n            endPage = currentPage + maxPagesAfterCurrentPage;\r\n        }\r\n    }\r\n\r\n    if (startPage > 1) {\r\n        pageButtons.push(<span key=\"startEllipsis\">...</span>);\r\n    }\r\n\r\n    for (let page = startPage; page <= endPage; page++) {\r\n        const isCurrentPage = currentPage === page;\r\n        const btnClass = isCurrentPage ? \"cool-page-active\" : \"\"; \r\n        pageButtons.push(\r\n            <button \r\n                className={`cool-page-btn ${btnClass}`} \r\n                key={page} \r\n                onClick={() => !isCurrentPage && goToPage(page)} \r\n                disabled={isCurrentPage}>\r\n                {page}\r\n            </button>\r\n        );\r\n    }\r\n\r\n    if (endPage < totalPages) {\r\n        pageButtons.push(<span key=\"endEllipsis\">...</span>);\r\n    }\r\n\r\n    return (\r\n        <div className=\"cool-pagination-controls\">\r\n            <button className=\"cool-navigation-btn\" onClick={goToPrevPage} disabled={currentPage === 1}>\r\n                Previous\r\n            </button>\r\n            <button className=\"cool-navigation-btn\" onClick={() => goToPage(1)} disabled={currentPage === 1}>1</button>\r\n            {pageButtons}\r\n            <button className=\"cool-navigation-btn\" onClick={() => goToPage(totalPages)} disabled={currentPage === totalPages}> {totalPages} </button>\r\n            <button className=\"cool-navigation-btn\" onClick={goToNextPage} disabled={currentPage === totalPages}>\r\n                Next\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Pagination;\r\n","import {formatIfDate} from \"./formatIfDate\";\r\n\r\n/**\r\n * @name renderCellValue\r\n * @memberof utils\r\n * @function\r\n * @description\r\n * Renders a cell value for display. It formats date strings, stringifies objects,\r\n * and handles null or undefined values by returning a blank space. \r\n * For non-object, non-null values, it applies date formatting if applicable.\r\n *\r\n * @param {any} value - The value to be rendered in a cell.\r\n * @returns {string} The rendered value as a string. If the value is null or undefined, returns a blank space.\r\n */\r\nexport function renderCellValue(value) {\r\n    if (value === null || value === undefined) return \" \";\r\n    if (typeof value === \"object\") return JSON.stringify(value);\r\n    return formatIfDate(value).toString();\r\n  }","/**\r\n * @name formatIfDate\r\n * @memberof utils\r\n * @function\r\n * @description\r\n * Checks if a given value is a string that matches a date pattern. If so, it formats\r\n * the string as a date in the 'dd/mm/yyyy' format. Otherwise, returns the value as is.\r\n * Supported date formats include YYYY-MM-DD, MM/DD/YYYY, and ISO 8601 format.\r\n *\r\n * @param {string} value - The value to be checked and potentially formatted as a date.\r\n * @returns {string | any} The formatted date string if the value is a date, otherwise the original value.\r\n */\r\n\r\n\r\nexport function formatIfDate(value) {\r\n  const datePattern = /^\\d{4}-\\d{1,2}-\\d{1,2}$|^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$|^\\d{4}-\\d{1,2}-\\d{1,2}T\\d{1,2}:\\d{1,2}:\\d{1,2}.\\d{3}Z$/;\r\n  \r\n  if (typeof value === \"string\" && datePattern.test(value)) {\r\n      const date = new Date(value);\r\n      if (!isNaN(date.getTime())) {\r\n          return date.toLocaleDateString(\"fr-FR\", { year: \"numeric\", month: \"numeric\", day: \"numeric\" });\r\n      }\r\n  }\r\n  return value;\r\n}\r\n","import React from \"react\";\r\nimport usePagination from \"../hookperso/usePaginationPerso\";\r\nimport PaginationSection from \"./PaginationSection.jsx\";\r\nimport { renderCellValue } from \"../utils/renderCellValue\";\r\nimport { flattenObject } from \"../utils/flattenObject\";\r\n\r\n\r\n/**\r\n * @memberOf Table\r\n * @name LinesTable\r\n * @function\r\n * @description\r\n * A component that renders the rows of a table based on the provided data.\r\n * It includes pagination functionality and displays only a subset of rows per page.\r\n * Each cell value is rendered based on its type and format.\r\n *\r\n * @param {Array<Object>} linesValues - The data to be displayed in the table rows.\r\n * @param {Array<{dataKey: string}>} columnsName - Array of objects representing the columns and their respective data keys.\r\n * @param {number} rowsPerPage - Number of rows to display per page.\r\n * @returns {React.Component} A React component representing the table rows with pagination.\r\n */\r\n\r\nfunction LinesTable({ linesValues, columnsName, rowsPerPage }) {\r\n  const { currentPage, totalPages, goToNextPage, goToPrevPage, currentData, goToPage } = usePagination(linesValues.length, rowsPerPage);\r\n\r\n  if (!linesValues) return null;\r\n\r\n  const { start, end } = currentData();\r\n  const currentRows = linesValues.slice(start, end);\r\n  const startIndex = start + 1;\r\n  const endIndex = end;\r\n  const totalEntries = linesValues.length;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"cool-body-table\">\r\n        {currentRows.map((line, lineIndex) => {\r\n          const flatLine = flattenObject(line);\r\n          return (\r\n            <div className=\"cool-row-container\" key={lineIndex}>\r\n              {columnsName.map((column, cellIndex) => {\r\n                const cellValue = flatLine[column.dataKey];\r\n                return (\r\n                  <div className=\"cool-cell\" key={`${lineIndex}-${cellIndex}`}>\r\n                    {renderCellValue(cellValue)}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div className=\"cool-pagination-navigation-container\">\r\n      <div className=\"cool-pagination-info\">\r\n        Showing {startIndex} to {endIndex} of {totalEntries}\r\n      </div>\r\n      <PaginationSection\r\n        totalPages={totalPages}\r\n        currentPage={currentPage}\r\n        goToNextPage={goToNextPage}\r\n        goToPrevPage={goToPrevPage}\r\n        goToPage={goToPage}\r\n      /></div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default LinesTable;\r\n","import { useState } from \"react\";\r\n\r\n\r\n/**\r\n * @name usePaginationPerso\r\n * @memberof utils\r\n * @function\r\n * @description\r\n * A custom hook for managing pagination logic. It calculates total pages based on the total items\r\n * and items per page, and provides functionality to navigate between pages.\r\n *\r\n * @param {number} totalItems - The total number of items to be paginated.\r\n * @param {number} itemsPerPage - The number of items to display per page.\r\n * @returns {{\r\n*   currentPage: number,\r\n*   totalPages: number,\r\n*   goToNextPage: function,\r\n*   goToPrevPage: function,\r\n*   goToPage: function,\r\n*   currentData: function\r\n* }} An object containing pagination state and control functions.\r\n*/\r\n\r\nfunction usePaginationPerso(totalItems, itemsPerPage) {\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const totalPages = Math.ceil(totalItems / itemsPerPage);\r\n\r\n    const goToNextPage = () => {\r\n        setCurrentPage((prev) => (prev < totalPages ? prev + 1 : prev));\r\n    };\r\n\r\n    const goToPrevPage = () => {\r\n        setCurrentPage((prev) => (prev > 1 ? prev - 1 : prev));\r\n    };\r\n\r\n    const currentData = () => {\r\n        const start = (currentPage - 1) * itemsPerPage;\r\n        const end = start + itemsPerPage;\r\n        return { start, end };\r\n    };\r\n\r\n    const goToPage = (page) => {\r\n        setCurrentPage(page);\r\n    };\r\n\r\n    return { currentPage, totalPages, goToNextPage, goToPrevPage, goToPage, currentData };\r\n}\r\n\r\nexport default usePaginationPerso;\r\n","import React from \"react\";\r\n\r\n\r\n/**\r\n * @name NumberRowSelector\r\n * @memberOf Table\r\n * @function\r\n * @description\r\n * A component that allows users to select the number of rows to be displayed per page in a table.\r\n * It provides a dropdown menu for the user to choose from predefined options (10, 25, 50, 100).\r\n *\r\n * @param {number} rowsPerPage - The current number of rows per page.\r\n * @param {function} setRowsPerPage - The callback function to set the number of rows per page.\r\n * @returns {React.Component} A React component representing a row count selector for a table.\r\n */\r\nfunction NumberRowSelector({ rowsPerPage, setRowsPerPage }) {\r\n  const handleRowsPerPageChange = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n  };\r\n\r\n  return (\r\n    <div className=\"cool-selector-container\">\r\n      <label htmlFor=\"rows-per-page\">Show</label>\r\n      <select id=\"rows-per-page\" value={rowsPerPage} onChange={handleRowsPerPageChange}>\r\n        <option value=\"10\">10</option>\r\n        <option value=\"25\">25</option>\r\n        <option value=\"50\">50</option>\r\n        <option value=\"100\">100</option>\r\n      </select>entries\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NumberRowSelector;\r\n","import React, { useState, useMemo } from \"react\";\r\nimport { columns } from \"./utils/columns.js\";\r\nimport HeaderTable from \"./components/HeaderTable.jsx\";\r\nimport LinesTable from \"./components/LinesTable.jsx\";\r\nimport \"./style/coolTable.css\";\r\nimport { columnSelected } from \"./utils/columnSelected.js\";\r\nimport NumberRowSelector from \"./components/NumberRowSelector.jsx\";\r\nimport { flattenObject } from \"./utils/flattenObject.js\";\r\n\r\n\r\n\r\n/**\r\n * @namespace Table\r\n * \r\n **/\r\n\r\n/**\r\n * @name CoolTable\r\n * @function\r\n * @description\r\n * A customizable and sortable table component. It allows excluding certain columns, \r\n * provides search functionality, and supports sorting. The table renders data passed to it,\r\n * applying column formatting and sorting based on user interactions.\r\n *\r\n * @param {Array<Object>} data - The data to be displayed in the table.\r\n * @param {Array<string>} excludedColumns - The columns to be excluded from the table.\r\n * @returns {React.Component} A React component representing a dynamically generated table.\r\n */\r\n\r\nfunction CoolTable({ data, excludedColumns }) {\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [sortConfig, setSortConfig] = useState({ key: null, direction: null });\r\n  const formatData = columnSelected(data, excludedColumns);\r\n  const columnsName = columns(formatData, true);\r\n  const columnsRef = columns(formatData, false);\r\n\r\n  const filteredLines = searchQuery\r\n    ? formatData.filter(line => {\r\n      const flatLine = flattenObject(line);\r\n      return Object.values(flatLine).some(value =>\r\n        String(value).toLowerCase().includes(searchQuery.toLowerCase())\r\n      );\r\n    })\r\n    : formatData;\r\n\r\n\r\n\r\n  const handleSortChange = (key) => {\r\n    let direction = \"ascending\";\r\n\r\n    if (sortConfig.key === key && sortConfig.direction !== null) {\r\n      direction = sortConfig.direction === \"ascending\" ? \"descending\" : sortConfig.direction === \"descending\" ? null : \"ascending\";\r\n    }\r\n\r\n    setSortConfig({ key, direction });\r\n  };\r\n\r\n  const getDataType = (value) => {\r\n    if (!isNaN(Date.parse(value)) && !isNaN(new Date(value).getDate())) {\r\n      return \"date\";\r\n    } else if (!isNaN(value) && typeof value !== \"string\") {\r\n      return \"number\";\r\n    }\r\n    return \"string\";\r\n  };\r\n\r\n  const sortedLines = useMemo(() => {\r\n    let sortableItems = [...filteredLines];\r\n    if (sortConfig.key && sortConfig.direction !== null) {\r\n      sortableItems.sort((a, b) => {\r\n        const keyParts = sortConfig.key.split(\".\");\r\n        const aValue = keyParts.length > 1 ? a[keyParts[0]][keyParts[1]] : a[sortConfig.key];\r\n        const bValue = keyParts.length > 1 ? b[keyParts[0]][keyParts[1]] : b[sortConfig.key];\r\n\r\n        if (aValue == null && bValue == null) return 0;\r\n        if (aValue == null) return -1;\r\n        if (bValue == null) return 1;\r\n        const type = getDataType(aValue);\r\n\r\n        switch (type) {\r\n          case \"date\":\r\n            return (new Date(aValue) - new Date(bValue)) * (sortConfig.direction === \"ascending\" ? 1 : -1);\r\n          case \"number\":\r\n            return (aValue - bValue) * (sortConfig.direction === \"ascending\" ? 1 : -1);\r\n          default:\r\n            return aValue.localeCompare(bValue) * (sortConfig.direction === \"ascending\" ? 1 : -1);\r\n        }\r\n      });\r\n    }\r\n    return sortableItems;\r\n  }, [filteredLines, sortConfig]);\r\n\r\n  if (!data) return null;\r\n\r\n  return (\r\n    <div className=\"cool-table\">\r\n      <div className=\"cool-head-table\">\r\n        <NumberRowSelector rowsPerPage={rowsPerPage} setRowsPerPage={setRowsPerPage} />\r\n        <div className=\"cool-search-input-container\">\r\n          <label htmlFor=\"search\">Search: </label>\r\n          <input\r\n            name=\"search\"\r\n            id=\"search\"\r\n            type=\"text\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n          /></div>\r\n      </div>\r\n      <HeaderTable columnsName={columnsName} columnsRef={columnsRef} onSortChange={handleSortChange} sortConfig={sortConfig} />\r\n      <LinesTable linesValues={sortedLines} columnsName={columnsRef} rowsPerPage={rowsPerPage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CoolTable;\r\n","/**\r\n * @name columnSelected\r\n * @memberof utils\r\n * @function\r\n * @description\r\n * Filters out specified keys from each object in the data array.\r\n * This is useful for selectively displaying certain columns from a dataset.\r\n *\r\n * @param {Array<Object>} data - Array of objects to be processed.\r\n * @param {Array<string>} excludeKeys - Keys to be excluded from each object.\r\n * @returns {Array<Object>} A new array of objects, without excluded keys.\r\n */\r\n\r\nexport const columnSelected = (data, excludeKeys) => {\r\n    return data.map(item => {\r\n        const newItem = {};\r\n        Object.keys(item).forEach(key => {\r\n            if (!excludeKeys.includes(key)) {\r\n                newItem[key] = item[key];\r\n            }\r\n        });\r\n        return newItem;\r\n    });\r\n};\r\n"],"names":["flattenObject","obj","flattened","Object","keys","forEach","key","_typeof","Array","isArray","subKey","concat","columns","data","position","length","flatData","map","formattedHeader","parts","split","replace","str","toUpperCase","trim","formatHeader","Header","dataKey","up","down","HeaderTable","_ref","columnsName","onSortChange","sortConfig","React","createElement","className","column","i","onClick","columnName","direction","src","alt","renderSortArrow","Pagination","startPage","endPage","totalPages","currentPage","goToPage","goToNextPage","goToPrevPage","pageButtons","maxPagesBeforeCurrentPage","Math","floor","maxPageButtons","maxPagesAfterCurrentPage","ceil","push","_loop","page","isCurrentPage","btnClass","disabled","renderCellValue","value","JSON","stringify","test","date","Date","isNaN","getTime","toLocaleDateString","year","month","day","formatIfDate","toString","LinesTable","linesValues","rowsPerPage","_usePagination","totalItems","itemsPerPage","_useState2","_slicedToArray","useState","setCurrentPage","prev","currentData","start","end","usePagination","_currentData","currentRows","slice","startIndex","endIndex","totalEntries","Fragment","line","lineIndex","flatLine","cellIndex","cellValue","PaginationSection","NumberRowSelector","setRowsPerPage","htmlFor","id","onChange","event","parseInt","target","excludedColumns","searchQuery","setSearchQuery","_useState4","_useState6","setSortConfig","formatData","excludeKeys","item","newItem","includes","columnSelected","columnsRef","filteredLines","filter","values","some","String","toLowerCase","sortedLines","useMemo","sortableItems","_toConsumableArray","sort","a","b","keyParts","aValue","bValue","parse","getDate","localeCompare","name","type","e"],"mappings":"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"}